# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Java CI with Maven

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  analyze:
    name: Analyze Code
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false
      matrix:
        language: [ 'java', 'javascript' ]
        
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      
    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v1
      with:
        languages: ${{ matrix.language }}  
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v1
    
  build:
    name: Build Code
    runs-on: ubuntu-latest
    needs: [analyze]
    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Cache the Maven packages to speed up build
      uses: actions/cache@v1
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2   
    - name: Build with Maven
      run: mvn -B package --file pom.xml

  publish-job:
      name: Package Code as war
      runs-on: ubuntu-latest
      #defaults:
        #run:
          #shell: bash
          #working-directory: build
      needs: [analyze, build]
      steps:
        - uses: actions/checkout@v2
        - uses: actions/setup-java@v1
          with:
            java-version: 1.8
        - uses: actions/cache@v1
          with:
            path: ~/.m2
            key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
            restore-keys: ${{ runner.os }}-m2   
        #- run: pwd
        #- run: ls -lart
        #- run: mvn -B package --file /build/pom.xml -DskipTests
        - run: mvn -B package --file ${GITHUB_WORKSPACE}/pom.xml -DskipTests
        - run: mkdir staging && cp ${GITHUB_WORKSPACE}/sm-shop/target/*.war staging
        - uses: actions/upload-artifact@v1
          with:
            name: Shopizer-Package
            path: staging

  containerize_n_push_to_registry:
    name: Build Docker image and push to GitHub Container Registry
    runs-on: ubuntu-latest
    needs: [analyze, build, publish-job]
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
      - name: Download built artifact
        #uses: actions/download-artifact@master
        uses: actions/download-artifact@v1
        with:
          name: Shopizer-Package
          #path: staging
      - name: Move the artifact to target
        run: |
          pwd
          ls -lart
          mkdir -p ${GITHUB_WORKSPACE}/sm-shop/target
          mv ${GITHUB_WORKSPACE}/Shopizer-Package/ROOT.war ${GITHUB_WORKSPACE}/sm-shop/target
          #docker build -t de.rieckpil.blog/github-actions-sample github-actions-java-maven  
      - name: Push to GitHub Packages
        uses: docker/build-push-action@v1
        with:
          username: ${{ secrets.CR_Username }}
          password: ${{ secrets.CR_Password }}
          registry: ghcr.io
          #repository: githubteamuser2/shopizer
          repository: githubdevopsdemo/githubteamuser2/shopizer
          tags: ${{ github.sha }}
          path: sm-shop/
          #dockerfile: Dockerfile
          file: sm-shop/Dockerfile
